// <auto-generated />
using System;
using FitApi.Core.Domain.Patients.Enums;
using FitApi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitApi.Database.Migrations
{
    [DbContext(typeof(FitDbContext))]
    [Migration("20251026225326_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "patients", "birth_genres", new[] { "male", "female" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityAlwaysColumns(modelBuilder);

            modelBuilder.Entity("FitApi.Core.Domain.Assessments.Models.BodyAssessment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<DateTimeOffset>("AssessmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("assessment_date")
                        .HasDefaultValueSql("now()");

                    b.Property<BirthGenres>("BirthGenre")
                        .HasColumnType("patients.birth_genres")
                        .HasColumnName("birth_genre");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<decimal>("FoldsSum")
                        .HasColumnType("decimal(10,9)")
                        .HasColumnName("folds_sum");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("height");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint")
                        .HasColumnName("patient_id");

                    b.Property<long>("ProfessionalId")
                        .HasColumnType("bigint")
                        .HasColumnName("professional_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("body_assessments", "assessments");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Assessments.Models.BodyAssessmentBrief", b =>
                {
                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PatientExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("patient_external_id");

                    b.Property<string>("ProfessionalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("professional_name");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.ToTable((string)null);

                    b.ToView("vw_assessments_brief", "assessments");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Assessments.Models.BodyAssessmentSkinFolds", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Abdomen")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("abdomen");

                    b.Property<long>("AssessmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("assessment_id");

                    b.Property<decimal>("Biceps")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("biceps");

                    b.Property<decimal>("Calf")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("calf");

                    b.Property<decimal>("MedianAxillary")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("median_axillary");

                    b.Property<decimal>("Subscapular")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("subscapular");

                    b.Property<decimal>("Suprailiac")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("suprailiac");

                    b.Property<decimal>("Supraspinal")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("supraspinal");

                    b.Property<decimal>("Thigh")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("thigh");

                    b.Property<decimal>("Thoracic")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("thoracic");

                    b.Property<decimal>("Triceps")
                        .HasColumnType("DECIMAL(5,2)")
                        .HasColumnName("triceps");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .IsUnique();

                    b.ToTable("body_assessment_skin_folds", "assessments");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Patients.Models.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<BirthGenres>("BirthGenre")
                        .HasColumnType("patients.birth_genres")
                        .HasColumnName("birth_genre");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("patients", "patients");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Professionals.Models.Professional", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("professionals", "professionals");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Assessments.Models.BodyAssessment", b =>
                {
                    b.HasOne("FitApi.Core.Domain.Patients.Models.Patient", "Patient")
                        .WithMany("BodyAssessments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_body_assessments_patients");

                    b.HasOne("FitApi.Core.Domain.Professionals.Models.Professional", "Professional")
                        .WithMany("BodyAssessments")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_body_assessments_professionals");

                    b.Navigation("Patient");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Assessments.Models.BodyAssessmentSkinFolds", b =>
                {
                    b.HasOne("FitApi.Core.Domain.Assessments.Models.BodyAssessment", "Assessment")
                        .WithOne("AssessmentSkinFolds")
                        .HasForeignKey("FitApi.Core.Domain.Assessments.Models.BodyAssessmentSkinFolds", "AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_body_assessment_skin_folds");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Assessments.Models.BodyAssessment", b =>
                {
                    b.Navigation("AssessmentSkinFolds");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Patients.Models.Patient", b =>
                {
                    b.Navigation("BodyAssessments");
                });

            modelBuilder.Entity("FitApi.Core.Domain.Professionals.Models.Professional", b =>
                {
                    b.Navigation("BodyAssessments");
                });
#pragma warning restore 612, 618
        }
    }
}
